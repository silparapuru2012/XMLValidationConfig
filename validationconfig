import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class XmlConfigService {

    private final Validator validator;

    public XmlConfigService() {
        this.validator = Validation.buildDefaultValidatorFactory().getValidator();
    }

    public List<XmlConfig> readValidXmlConfigs(String xmlFolderPath) {
        List<XmlConfig> xmlConfigs = readAllXmlConfigs(xmlFolderPath);

        return xmlConfigs.stream()
                .filter(this::isValidXmlConfig)
                .collect(Collectors.toList());
    }

    private List<XmlConfig> readAllXmlConfigs(String xmlFolderPath) {
        // Your existing logic to read XML configs
        // ...

        // For demonstration, let's assume you have a list of XmlConfig objects
        return List.of(new XmlConfig(), new XmlConfig());
    }

    private boolean isValidXmlConfig(XmlConfig xmlConfig) {
        Set<ConstraintViolation<XmlConfig>> violations = validator.validate(xmlConfig);

        if (!violations.isEmpty()) {
            // Handle validation errors (you can log them or perform other actions)
            for (ConstraintViolation<XmlConfig> violation : violations) {
                System.err.println("Validation error: " + violation.getMessage());
            }

            return false; // Invalid XML config
        }

        return true; // Valid XML config
    }
}

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Pattern;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

import com.sun.istack.NotNull;

@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
public class XmlConfig {

    @NotBlank(message = "Source folder cannot be blank")
    @XmlElement
    private String sourceFolder;

    @NotBlank(message = "Destination folder cannot be blank")
    @XmlElement
    private String destinationFolder;

    @NotBlank(message = "Trigger time cannot be blank")
    @XmlElement
    private String triggerTime;

    @NotBlank(message = "SFTP host cannot be blank")
    @XmlElement
    private String sftpHost;

    @NotNull(message = "SFTP port cannot be null")
    @XmlElement
    private Integer sftpPort;

    @NotBlank(message = "SFTP username cannot be blank")
    @XmlElement
    private String sftpUsername;

    @NotBlank(message = "SFTP password cannot be blank")
    @XmlElement
    private String sftpPassword;

    @NotBlank(message = "Action cannot be blank")
    @Pattern(regexp = "^(UPLOAD|DOWNLOAD)$", message = "Action must be either UPLOAD or DOWNLOAD")
    @XmlElement
    private String action;

    // Getters and setters

    // ...
}
